---
layout: single
author_profile: true
classes: wide

title:  "kepler.py<span class='blink'>&#9608;</span>"
date:   2022-05-21 10:00:00 -0600
header:
  video: /assets/videos/kepler.mp4
excerpt: Hand-made keplerian orbit simulation, made as extra credit for an introductory astronomy class.
---
<a href="https://github.com/TimEwing/kepler">
  <i class="fab fa-github"> View source on GitHub</i>
</a>

Kepler is a program which simulates what an Earth-based telescope would see when observing the transit of an exoplanet in front of another solar system's star.

<figure style="width: 218px" class="align-center">
  <a href="https://xkcd.com/1371/">
    <img src="https://imgs.xkcd.com/comics/brightness.png">
  </a>
</figure> 

It was designed to generate short, educational animations to help explain the concept to students. I wrote it as an optional, extra-credit assignment for my Introduction to Astronomy class - the assignment was to create an educational graphic for future classes. 

Here's a what Jupiter orbiting the Sun in Mercury's orbit would look like:

<video align="center" width="100%" autoplay="true" loop muted>
  <source src="/assets/videos/kepler.mp4" type="video/mp4">
</video>
The program actually generates four separate, synchronized animations:
<ol>
  <li>Upper-left: The (exaggerated) color of what each pixel would see</li>
  <li>Upper-right: The orbit, sun, and planet (to scale)</li>
  <li>Center-right: The non-pixelated image of the planet crossing the star</li>
  <li>Bottom: The lightcurve of the observation, with simulated noise.</li>
</ol>

The program is able to handle all the normal parameters for keplerian orbits. Here's Jupiter on a completely unrealistic, inclined, comet-like path in front of the Sun:

<video align="center" width="100%" autoplay="true" loop muted>
  <source src="/assets/videos/kepler2.mp4" type="video/mp4">
</video>


You can also use Kepler to simulate lunar eclipses since it is essentially the same phenomenon (a big dark thing going in front of the big circular light thing):
<video align="center" width="100%" autoplay="true" loop muted>
  <source src="/assets/videos/kepler3.mp4" type="video/mp4">
</video>

I wrote the program in python and used basically only numpy and matplotlib; no libraries were used for orbital or geometry calculations. There's a ton of 2-d and 3-d trig involved, and it got pretty nasty pretty quickly. It also includes a hand-built Newton's Method minimum finder since I got sick of trying to analytically solve for the transit point.

I'm not going to write up the mess that is the geometry involved here, but if you want a taste the code is at <a href="https://github.com/TimEwing/kepler">https://github.com/TimEwing/kepler</a>. There is only one commit, no documentation, and only a few comments but other than the math its mostly just configuring matplotlib. The whole project was less than 48 hours start-to-finish. The highlight is probably the solution for the circle-circle-square intersection; that chunk of code took the majority of the project's time.
